# =============================================================================
# Sales Forecast – PowerShell Command Cheatsheet
# =============================================================================
# Assumes you're inside the project root and your venv is activated:
#   .\.venv\Scripts\Activate.ps1
# Files/paths referenced below:
#   data CSV:   .\data\sales.csv
#   models dir: .\models
# Adjust paths as needed.
# =============================================================================


# -----------------------------------------------------------------------------
# 0) CLEANUP HELPERS (optional)
# -----------------------------------------------------------------------------

# Wipe ALL models (global + per-group)
Remove-Item -Recurse -Force .\models -ErrorAction SilentlyContinue

# Wipe per-scope subfolders only
Remove-Item -Recurse -Force .\models\by_pair  -ErrorAction SilentlyContinue
Remove-Item -Recurse -Force .\models\by_item  -ErrorAction SilentlyContinue
Remove-Item -Recurse -Force .\models\by_store -ErrorAction SilentlyContinue


# -----------------------------------------------------------------------------
# 1) GLOBAL RETRAIN (ONE MODEL PER HORIZON)
# -----------------------------------------------------------------------------
# Notes:
# - Horizons string supports ranges/lists: '1-7', '1,2,4-6', etc.
# - nthread: set to the number of physical cores you want XGBoost to use
#   (e.g., 8). Use 1 for reproducibility together with --enforce-single-thread-env.
# - Quality vs Speed:
#   * Quality: increase trees (edit config.py → n_estimators=600), optionally enable
#              early stopping with a validation split (set valid_cutoff_date in config.py).
#   * Speed:   keep defaults from config.py (tree_method='hist', n_estimators=300),
#              increase --nthread to use more CPU.

# (A) Global retrain – balanced (default config speed/quality)
python -m sales_forecast.cli train `
  --data-csv .\data\sales.csv `
  --models-dir .\models `
  --horizons '1-7' `
  --hol-country US `
  --nthread 8 `
  --verbose-eval 0

# (B) Global retrain – reproducible (single-thread, slower, stable)
python -m sales_forecast.cli train `
  --data-csv .\data\sales.csv `
  --models-dir .\models `
  --horizons '1-7' `
  --hol-country US `
  --nthread 1 `
  --verbose-eval 0 `
  --enforce-single-thread-env

# (C) Global retrain – quick smoke run (use fewer horizons)
python -m sales_forecast.cli train `
  --data-csv .\data\sales.csv `
  --models-dir .\models `
  --horizons '1-3' `
  --hol-country US `
  --nthread 8 `
  --verbose-eval 0


# -----------------------------------------------------------------------------
# 2) PER-GROUP RETRAIN (CHOOSE ONE SCOPE)
# -----------------------------------------------------------------------------
# Layout:
#   .\models\by_pair\{store}__{item}\model_h{h}.xgb.json
#   .\models\by_item\{item}\model_h{h}.xgb.json
#   .\models\by_store\{store}\model_h{h}.xgb.json
#
# TIP for speed: start with fewer horizons (e.g., '1-3') and higher --nthread.

# (A) Per (store,item) pair
Remove-Item -Recurse -Force .\models\by_pair -ErrorAction SilentlyContinue
python -m sales_forecast.cli train-per-group pair `
  --data-csv .\data\sales.csv `
  --models-dir .\models `
  --horizons '1-7' `
  --hol-country US `
  --nthread 8 `
  --verbose-eval 0

# (B) Per item
Remove-Item -Recurse -Force .\models\by_item -ErrorAction SilentlyContinue
python -m sales_forecast.cli train-per-group item `
  --data-csv .\data\sales.csv `
  --models-dir .\models `
  --horizons '1-7' `
  --hol-country US `
  --nthread 8 `
  --verbose-eval 0

# (C) Per store
Remove-Item -Recurse -Force .\models\by_store -ErrorAction SilentlyContinue
python -m sales_forecast.cli train-per-group store `
  --data-csv .\data\sales.csv `
  --models-dir .\models `
  --horizons '1-7' `
  --hol-country US `
  --nthread 8 `
  --verbose-eval 0


# -----------------------------------------------------------------------------
# 3) CLI FORECASTING EXAMPLES
# -----------------------------------------------------------------------------
# Scope options:
#   single | latest_per_pair | latest_per_store | latest_per_item | last_n_days | since_date | at_date
# For 'single': provide store_id and item_id; for last_n_days: provide --n-days; etc.

# (A) Single target (store+item), horizons 1-7
python -m sales_forecast.cli forecast `
  --data-csv .\data\sales.csv `
  --models-dir .\models `
  --out-csv .\preds_single.csv `
  --scope single `
  --horizons '1-7' `
  --hol-country US `
  --nthread 8 `
  --verbose-eval 0 `
  --store-id S01 `
  --item-id I01

# (B) Latest per (store,item) pair across the dataset
python -m sales_forecast.cli forecast `
  --data-csv .\data\sales.csv `
  --models-dir .\models `
  --out-csv .\preds_latest_pairs.csv `
  --scope latest_per_pair `
  --horizons '1-7' `
  --hol-country US

# (C) Last N days (all rows within trailing window)
python -m sales_forecast.cli forecast `
  --data-csv .\data\sales.csv `
  --models-dir .\models `
  --out-csv .\preds_last7.csv `
  --scope last_n_days `
  --n-days 7 `
  --horizons '1-7'


# -----------------------------------------------------------------------------
# 4) SERVE WEB API + UI
# -----------------------------------------------------------------------------
# Start FastAPI (Swagger + HTML UI). If you have a demo CSV, pass it so the UI can run
# without uploads. Horizons control which horizons are exposed by the service.

# (A) Serve with demo CSV
python -m sales_forecast.cli serve-web `
  --models-dir .\models `
  --data-csv .\data\sales.csv `
  --horizons '1-7' `
  --hol-country US `
  --host 127.0.0.1 `
  --port 8000 `
  --reload

# (B) Serve without demo CSV (UI will expect uploads)
python -m sales_forecast.cli serve-web `
  --models-dir .\models `
  --horizons '1-7' `
  --hol-country US `
  --host 127.0.0.1 `
  --port 8000


# -----------------------------------------------------------------------------
# 5) DATA GENERATION HELPERS (OPTIONAL)
# -----------------------------------------------------------------------------
# Synthetic dataset
python -m sales_forecast.cli generate-data `
  --mode synthetic `
  --out-csv .\data\sales.csv `
  --n-stores 5 `
  --n-items 20 `
  --start 2024-01-01 `
  --periods 180 `
  --seed 123

# From a flat table (example placeholders)
# python -m sales_forecast.cli generate-data `
#   --mode from-flat `
#   --out-csv .\data\sales.csv `
#   --flat-csv .\path\to\flat.csv `
#   --date-col date `
#   --store-col store_id `
#   --item-col item_id `
#   --sales-col sales `
#   --price-col price `
#   --promo-col promo


# -----------------------------------------------------------------------------
# 6) SPEED vs QUALITY CHECKLIST (quick notes)
# -----------------------------------------------------------------------------
# * Speed up (training):
#   - Use config defaults (tree_method='hist', n_estimators=300).
#   - Increase --nthread (e.g., 8 or your #cores).
#   - Reduce horizons (e.g., '1-3' while iterating).
#   - Prefer global training before per-group (per-group multiplies models).
#
# * Improve quality:
#   - Edit config.py → TrainingConfig:
#       n_estimators=600 (more trees, slower)
#       Optionally set valid_cutoff_date="YYYY-MM-DD" and early_stopping_rounds (requires edit in config and pipeline)
#   - Keep lags/rolling windows richer in config (more features → slower).
#
# * Reproducibility:
#   - Use --nthread 1 and --enforce-single-thread-env (slower, stable results).
#
# * Serving parity:
#   - Holidays used at training are saved alongside models; service auto-aligns.
#   - If your models expect future controls (price_h*/promo_h*), provide plans in the UI/requests.
# =============================================================================
